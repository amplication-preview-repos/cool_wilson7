/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BehavioralBiometrics } from "./BehavioralBiometrics";
import { BehavioralBiometricsCountArgs } from "./BehavioralBiometricsCountArgs";
import { BehavioralBiometricsFindManyArgs } from "./BehavioralBiometricsFindManyArgs";
import { BehavioralBiometricsFindUniqueArgs } from "./BehavioralBiometricsFindUniqueArgs";
import { DeleteBehavioralBiometricsArgs } from "./DeleteBehavioralBiometricsArgs";
import { BehavioralBiometricsService } from "../behavioralBiometrics.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BehavioralBiometrics)
export class BehavioralBiometricsResolverBase {
  constructor(
    protected readonly service: BehavioralBiometricsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BehavioralBiometrics",
    action: "read",
    possession: "any",
  })
  async _behavioralBiometricsItemsMeta(
    @graphql.Args() args: BehavioralBiometricsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BehavioralBiometrics])
  @nestAccessControl.UseRoles({
    resource: "BehavioralBiometrics",
    action: "read",
    possession: "any",
  })
  async behavioralBiometricsItems(
    @graphql.Args() args: BehavioralBiometricsFindManyArgs
  ): Promise<BehavioralBiometrics[]> {
    return this.service.behavioralBiometricsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BehavioralBiometrics, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BehavioralBiometrics",
    action: "read",
    possession: "own",
  })
  async behavioralBiometrics(
    @graphql.Args() args: BehavioralBiometricsFindUniqueArgs
  ): Promise<BehavioralBiometrics | null> {
    const result = await this.service.behavioralBiometrics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BehavioralBiometrics)
  @nestAccessControl.UseRoles({
    resource: "BehavioralBiometrics",
    action: "delete",
    possession: "any",
  })
  async deleteBehavioralBiometrics(
    @graphql.Args() args: DeleteBehavioralBiometricsArgs
  ): Promise<BehavioralBiometrics | null> {
    try {
      return await this.service.deleteBehavioralBiometrics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
