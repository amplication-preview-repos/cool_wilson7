/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AiCodeAssistance } from "./AiCodeAssistance";
import { AiCodeAssistanceCountArgs } from "./AiCodeAssistanceCountArgs";
import { AiCodeAssistanceFindManyArgs } from "./AiCodeAssistanceFindManyArgs";
import { AiCodeAssistanceFindUniqueArgs } from "./AiCodeAssistanceFindUniqueArgs";
import { DeleteAiCodeAssistanceArgs } from "./DeleteAiCodeAssistanceArgs";
import { AiCodeAssistanceService } from "../aiCodeAssistance.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AiCodeAssistance)
export class AiCodeAssistanceResolverBase {
  constructor(
    protected readonly service: AiCodeAssistanceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AiCodeAssistance",
    action: "read",
    possession: "any",
  })
  async _aiCodeAssistancesMeta(
    @graphql.Args() args: AiCodeAssistanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AiCodeAssistance])
  @nestAccessControl.UseRoles({
    resource: "AiCodeAssistance",
    action: "read",
    possession: "any",
  })
  async aiCodeAssistances(
    @graphql.Args() args: AiCodeAssistanceFindManyArgs
  ): Promise<AiCodeAssistance[]> {
    return this.service.aiCodeAssistances(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AiCodeAssistance, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AiCodeAssistance",
    action: "read",
    possession: "own",
  })
  async aiCodeAssistance(
    @graphql.Args() args: AiCodeAssistanceFindUniqueArgs
  ): Promise<AiCodeAssistance | null> {
    const result = await this.service.aiCodeAssistance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AiCodeAssistance)
  @nestAccessControl.UseRoles({
    resource: "AiCodeAssistance",
    action: "delete",
    possession: "any",
  })
  async deleteAiCodeAssistance(
    @graphql.Args() args: DeleteAiCodeAssistanceArgs
  ): Promise<AiCodeAssistance | null> {
    try {
      return await this.service.deleteAiCodeAssistance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
