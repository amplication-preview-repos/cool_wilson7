/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AiCodeAssistance as PrismaAiCodeAssistance,
} from "@prisma/client";

export class AiCodeAssistanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AiCodeAssistanceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aiCodeAssistance.count(args);
  }

  async aiCodeAssistances(
    args: Prisma.AiCodeAssistanceFindManyArgs
  ): Promise<PrismaAiCodeAssistance[]> {
    return this.prisma.aiCodeAssistance.findMany(args);
  }
  async aiCodeAssistance(
    args: Prisma.AiCodeAssistanceFindUniqueArgs
  ): Promise<PrismaAiCodeAssistance | null> {
    return this.prisma.aiCodeAssistance.findUnique(args);
  }
  async createAiCodeAssistance(
    args: Prisma.AiCodeAssistanceCreateArgs
  ): Promise<PrismaAiCodeAssistance> {
    return this.prisma.aiCodeAssistance.create(args);
  }
  async updateAiCodeAssistance(
    args: Prisma.AiCodeAssistanceUpdateArgs
  ): Promise<PrismaAiCodeAssistance> {
    return this.prisma.aiCodeAssistance.update(args);
  }
  async deleteAiCodeAssistance(
    args: Prisma.AiCodeAssistanceDeleteArgs
  ): Promise<PrismaAiCodeAssistance> {
    return this.prisma.aiCodeAssistance.delete(args);
  }
}
