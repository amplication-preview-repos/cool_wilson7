/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AiCodeAssistanceService } from "../aiCodeAssistance.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AiCodeAssistanceCreateInput } from "./AiCodeAssistanceCreateInput";
import { AiCodeAssistance } from "./AiCodeAssistance";
import { AiCodeAssistanceFindManyArgs } from "./AiCodeAssistanceFindManyArgs";
import { AiCodeAssistanceWhereUniqueInput } from "./AiCodeAssistanceWhereUniqueInput";
import { AiCodeAssistanceUpdateInput } from "./AiCodeAssistanceUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AiCodeAssistanceControllerBase {
  constructor(
    protected readonly service: AiCodeAssistanceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AiCodeAssistance })
  @nestAccessControl.UseRoles({
    resource: "AiCodeAssistance",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AiCodeAssistanceCreateInput,
  })
  async createAiCodeAssistance(
    @common.Body() data: AiCodeAssistanceCreateInput
  ): Promise<AiCodeAssistance> {
    return await this.service.createAiCodeAssistance({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AiCodeAssistance] })
  @ApiNestedQuery(AiCodeAssistanceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AiCodeAssistance",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async aiCodeAssistances(
    @common.Req() request: Request
  ): Promise<AiCodeAssistance[]> {
    const args = plainToClass(AiCodeAssistanceFindManyArgs, request.query);
    return this.service.aiCodeAssistances({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AiCodeAssistance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AiCodeAssistance",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async aiCodeAssistance(
    @common.Param() params: AiCodeAssistanceWhereUniqueInput
  ): Promise<AiCodeAssistance | null> {
    const result = await this.service.aiCodeAssistance({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AiCodeAssistance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AiCodeAssistance",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AiCodeAssistanceUpdateInput,
  })
  async updateAiCodeAssistance(
    @common.Param() params: AiCodeAssistanceWhereUniqueInput,
    @common.Body() data: AiCodeAssistanceUpdateInput
  ): Promise<AiCodeAssistance | null> {
    try {
      return await this.service.updateAiCodeAssistance({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AiCodeAssistance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AiCodeAssistance",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAiCodeAssistance(
    @common.Param() params: AiCodeAssistanceWhereUniqueInput
  ): Promise<AiCodeAssistance | null> {
    try {
      return await this.service.deleteAiCodeAssistance({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
