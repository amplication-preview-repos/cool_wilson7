/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ContinuousLearning as PrismaContinuousLearning,
} from "@prisma/client";

export class ContinuousLearningServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContinuousLearningCountArgs, "select">
  ): Promise<number> {
    return this.prisma.continuousLearning.count(args);
  }

  async continuousLearnings(
    args: Prisma.ContinuousLearningFindManyArgs
  ): Promise<PrismaContinuousLearning[]> {
    return this.prisma.continuousLearning.findMany(args);
  }
  async continuousLearning(
    args: Prisma.ContinuousLearningFindUniqueArgs
  ): Promise<PrismaContinuousLearning | null> {
    return this.prisma.continuousLearning.findUnique(args);
  }
  async createContinuousLearning(
    args: Prisma.ContinuousLearningCreateArgs
  ): Promise<PrismaContinuousLearning> {
    return this.prisma.continuousLearning.create(args);
  }
  async updateContinuousLearning(
    args: Prisma.ContinuousLearningUpdateArgs
  ): Promise<PrismaContinuousLearning> {
    return this.prisma.continuousLearning.update(args);
  }
  async deleteContinuousLearning(
    args: Prisma.ContinuousLearningDeleteArgs
  ): Promise<PrismaContinuousLearning> {
    return this.prisma.continuousLearning.delete(args);
  }
}
