/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DigitalTwinSupport } from "./DigitalTwinSupport";
import { DigitalTwinSupportCountArgs } from "./DigitalTwinSupportCountArgs";
import { DigitalTwinSupportFindManyArgs } from "./DigitalTwinSupportFindManyArgs";
import { DigitalTwinSupportFindUniqueArgs } from "./DigitalTwinSupportFindUniqueArgs";
import { DeleteDigitalTwinSupportArgs } from "./DeleteDigitalTwinSupportArgs";
import { DigitalTwinSupportService } from "../digitalTwinSupport.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DigitalTwinSupport)
export class DigitalTwinSupportResolverBase {
  constructor(
    protected readonly service: DigitalTwinSupportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DigitalTwinSupport",
    action: "read",
    possession: "any",
  })
  async _digitalTwinSupportsMeta(
    @graphql.Args() args: DigitalTwinSupportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DigitalTwinSupport])
  @nestAccessControl.UseRoles({
    resource: "DigitalTwinSupport",
    action: "read",
    possession: "any",
  })
  async digitalTwinSupports(
    @graphql.Args() args: DigitalTwinSupportFindManyArgs
  ): Promise<DigitalTwinSupport[]> {
    return this.service.digitalTwinSupports(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DigitalTwinSupport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DigitalTwinSupport",
    action: "read",
    possession: "own",
  })
  async digitalTwinSupport(
    @graphql.Args() args: DigitalTwinSupportFindUniqueArgs
  ): Promise<DigitalTwinSupport | null> {
    const result = await this.service.digitalTwinSupport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DigitalTwinSupport)
  @nestAccessControl.UseRoles({
    resource: "DigitalTwinSupport",
    action: "delete",
    possession: "any",
  })
  async deleteDigitalTwinSupport(
    @graphql.Args() args: DeleteDigitalTwinSupportArgs
  ): Promise<DigitalTwinSupport | null> {
    try {
      return await this.service.deleteDigitalTwinSupport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
