/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GraphDatabase as PrismaGraphDatabase } from "@prisma/client";

export class GraphDatabaseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GraphDatabaseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.graphDatabase.count(args);
  }

  async graphDatabases(
    args: Prisma.GraphDatabaseFindManyArgs
  ): Promise<PrismaGraphDatabase[]> {
    return this.prisma.graphDatabase.findMany(args);
  }
  async graphDatabase(
    args: Prisma.GraphDatabaseFindUniqueArgs
  ): Promise<PrismaGraphDatabase | null> {
    return this.prisma.graphDatabase.findUnique(args);
  }
  async createGraphDatabase(
    args: Prisma.GraphDatabaseCreateArgs
  ): Promise<PrismaGraphDatabase> {
    return this.prisma.graphDatabase.create(args);
  }
  async updateGraphDatabase(
    args: Prisma.GraphDatabaseUpdateArgs
  ): Promise<PrismaGraphDatabase> {
    return this.prisma.graphDatabase.update(args);
  }
  async deleteGraphDatabase(
    args: Prisma.GraphDatabaseDeleteArgs
  ): Promise<PrismaGraphDatabase> {
    return this.prisma.graphDatabase.delete(args);
  }
}
