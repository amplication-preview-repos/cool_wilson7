/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AutomatedCodeReview as PrismaAutomatedCodeReview,
} from "@prisma/client";

export class AutomatedCodeReviewServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AutomatedCodeReviewCountArgs, "select">
  ): Promise<number> {
    return this.prisma.automatedCodeReview.count(args);
  }

  async automatedCodeReviews(
    args: Prisma.AutomatedCodeReviewFindManyArgs
  ): Promise<PrismaAutomatedCodeReview[]> {
    return this.prisma.automatedCodeReview.findMany(args);
  }
  async automatedCodeReview(
    args: Prisma.AutomatedCodeReviewFindUniqueArgs
  ): Promise<PrismaAutomatedCodeReview | null> {
    return this.prisma.automatedCodeReview.findUnique(args);
  }
  async createAutomatedCodeReview(
    args: Prisma.AutomatedCodeReviewCreateArgs
  ): Promise<PrismaAutomatedCodeReview> {
    return this.prisma.automatedCodeReview.create(args);
  }
  async updateAutomatedCodeReview(
    args: Prisma.AutomatedCodeReviewUpdateArgs
  ): Promise<PrismaAutomatedCodeReview> {
    return this.prisma.automatedCodeReview.update(args);
  }
  async deleteAutomatedCodeReview(
    args: Prisma.AutomatedCodeReviewDeleteArgs
  ): Promise<PrismaAutomatedCodeReview> {
    return this.prisma.automatedCodeReview.delete(args);
  }
}
