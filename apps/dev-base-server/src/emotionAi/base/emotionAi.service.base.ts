/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EmotionAi as PrismaEmotionAi } from "@prisma/client";

export class EmotionAiServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmotionAiCountArgs, "select">
  ): Promise<number> {
    return this.prisma.emotionAi.count(args);
  }

  async emotionAis(
    args: Prisma.EmotionAiFindManyArgs
  ): Promise<PrismaEmotionAi[]> {
    return this.prisma.emotionAi.findMany(args);
  }
  async emotionAi(
    args: Prisma.EmotionAiFindUniqueArgs
  ): Promise<PrismaEmotionAi | null> {
    return this.prisma.emotionAi.findUnique(args);
  }
  async createEmotionAi(
    args: Prisma.EmotionAiCreateArgs
  ): Promise<PrismaEmotionAi> {
    return this.prisma.emotionAi.create(args);
  }
  async updateEmotionAi(
    args: Prisma.EmotionAiUpdateArgs
  ): Promise<PrismaEmotionAi> {
    return this.prisma.emotionAi.update(args);
  }
  async deleteEmotionAi(
    args: Prisma.EmotionAiDeleteArgs
  ): Promise<PrismaEmotionAi> {
    return this.prisma.emotionAi.delete(args);
  }
}
