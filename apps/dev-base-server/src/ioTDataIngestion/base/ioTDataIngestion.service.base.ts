/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  IoTDataIngestion as PrismaIoTDataIngestion,
} from "@prisma/client";

export class IoTDataIngestionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IoTDataIngestionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ioTDataIngestion.count(args);
  }

  async ioTDataIngestions(
    args: Prisma.IoTDataIngestionFindManyArgs
  ): Promise<PrismaIoTDataIngestion[]> {
    return this.prisma.ioTDataIngestion.findMany(args);
  }
  async ioTDataIngestion(
    args: Prisma.IoTDataIngestionFindUniqueArgs
  ): Promise<PrismaIoTDataIngestion | null> {
    return this.prisma.ioTDataIngestion.findUnique(args);
  }
  async createIoTDataIngestion(
    args: Prisma.IoTDataIngestionCreateArgs
  ): Promise<PrismaIoTDataIngestion> {
    return this.prisma.ioTDataIngestion.create(args);
  }
  async updateIoTDataIngestion(
    args: Prisma.IoTDataIngestionUpdateArgs
  ): Promise<PrismaIoTDataIngestion> {
    return this.prisma.ioTDataIngestion.update(args);
  }
  async deleteIoTDataIngestion(
    args: Prisma.IoTDataIngestionDeleteArgs
  ): Promise<PrismaIoTDataIngestion> {
    return this.prisma.ioTDataIngestion.delete(args);
  }
}
