/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MultiLanguageRuntimeEnvironmentService } from "../multiLanguageRuntimeEnvironment.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MultiLanguageRuntimeEnvironmentCreateInput } from "./MultiLanguageRuntimeEnvironmentCreateInput";
import { MultiLanguageRuntimeEnvironment } from "./MultiLanguageRuntimeEnvironment";
import { MultiLanguageRuntimeEnvironmentFindManyArgs } from "./MultiLanguageRuntimeEnvironmentFindManyArgs";
import { MultiLanguageRuntimeEnvironmentWhereUniqueInput } from "./MultiLanguageRuntimeEnvironmentWhereUniqueInput";
import { MultiLanguageRuntimeEnvironmentUpdateInput } from "./MultiLanguageRuntimeEnvironmentUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MultiLanguageRuntimeEnvironmentControllerBase {
  constructor(
    protected readonly service: MultiLanguageRuntimeEnvironmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MultiLanguageRuntimeEnvironment })
  @nestAccessControl.UseRoles({
    resource: "MultiLanguageRuntimeEnvironment",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: MultiLanguageRuntimeEnvironmentCreateInput,
  })
  async createMultiLanguageRuntimeEnvironment(
    @common.Body() data: MultiLanguageRuntimeEnvironmentCreateInput
  ): Promise<MultiLanguageRuntimeEnvironment> {
    return await this.service.createMultiLanguageRuntimeEnvironment({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MultiLanguageRuntimeEnvironment] })
  @ApiNestedQuery(MultiLanguageRuntimeEnvironmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MultiLanguageRuntimeEnvironment",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async multiLanguageRuntimeEnvironments(
    @common.Req() request: Request
  ): Promise<MultiLanguageRuntimeEnvironment[]> {
    const args = plainToClass(
      MultiLanguageRuntimeEnvironmentFindManyArgs,
      request.query
    );
    return this.service.multiLanguageRuntimeEnvironments({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MultiLanguageRuntimeEnvironment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MultiLanguageRuntimeEnvironment",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async multiLanguageRuntimeEnvironment(
    @common.Param() params: MultiLanguageRuntimeEnvironmentWhereUniqueInput
  ): Promise<MultiLanguageRuntimeEnvironment | null> {
    const result = await this.service.multiLanguageRuntimeEnvironment({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MultiLanguageRuntimeEnvironment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MultiLanguageRuntimeEnvironment",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: MultiLanguageRuntimeEnvironmentUpdateInput,
  })
  async updateMultiLanguageRuntimeEnvironment(
    @common.Param() params: MultiLanguageRuntimeEnvironmentWhereUniqueInput,
    @common.Body() data: MultiLanguageRuntimeEnvironmentUpdateInput
  ): Promise<MultiLanguageRuntimeEnvironment | null> {
    try {
      return await this.service.updateMultiLanguageRuntimeEnvironment({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MultiLanguageRuntimeEnvironment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MultiLanguageRuntimeEnvironment",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMultiLanguageRuntimeEnvironment(
    @common.Param() params: MultiLanguageRuntimeEnvironmentWhereUniqueInput
  ): Promise<MultiLanguageRuntimeEnvironment | null> {
    try {
      return await this.service.deleteMultiLanguageRuntimeEnvironment({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
