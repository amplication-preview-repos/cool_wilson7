/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DocumentDatabase as PrismaDocumentDatabase,
} from "@prisma/client";

export class DocumentDatabaseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DocumentDatabaseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.documentDatabase.count(args);
  }

  async documentDatabases(
    args: Prisma.DocumentDatabaseFindManyArgs
  ): Promise<PrismaDocumentDatabase[]> {
    return this.prisma.documentDatabase.findMany(args);
  }
  async documentDatabase(
    args: Prisma.DocumentDatabaseFindUniqueArgs
  ): Promise<PrismaDocumentDatabase | null> {
    return this.prisma.documentDatabase.findUnique(args);
  }
  async createDocumentDatabase(
    args: Prisma.DocumentDatabaseCreateArgs
  ): Promise<PrismaDocumentDatabase> {
    return this.prisma.documentDatabase.create(args);
  }
  async updateDocumentDatabase(
    args: Prisma.DocumentDatabaseUpdateArgs
  ): Promise<PrismaDocumentDatabase> {
    return this.prisma.documentDatabase.update(args);
  }
  async deleteDocumentDatabase(
    args: Prisma.DocumentDatabaseDeleteArgs
  ): Promise<PrismaDocumentDatabase> {
    return this.prisma.documentDatabase.delete(args);
  }
}
