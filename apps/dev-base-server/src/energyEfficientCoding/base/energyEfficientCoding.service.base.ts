/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EnergyEfficientCoding as PrismaEnergyEfficientCoding,
} from "@prisma/client";

export class EnergyEfficientCodingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EnergyEfficientCodingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.energyEfficientCoding.count(args);
  }

  async energyEfficientCodings(
    args: Prisma.EnergyEfficientCodingFindManyArgs
  ): Promise<PrismaEnergyEfficientCoding[]> {
    return this.prisma.energyEfficientCoding.findMany(args);
  }
  async energyEfficientCoding(
    args: Prisma.EnergyEfficientCodingFindUniqueArgs
  ): Promise<PrismaEnergyEfficientCoding | null> {
    return this.prisma.energyEfficientCoding.findUnique(args);
  }
  async createEnergyEfficientCoding(
    args: Prisma.EnergyEfficientCodingCreateArgs
  ): Promise<PrismaEnergyEfficientCoding> {
    return this.prisma.energyEfficientCoding.create(args);
  }
  async updateEnergyEfficientCoding(
    args: Prisma.EnergyEfficientCodingUpdateArgs
  ): Promise<PrismaEnergyEfficientCoding> {
    return this.prisma.energyEfficientCoding.update(args);
  }
  async deleteEnergyEfficientCoding(
    args: Prisma.EnergyEfficientCodingDeleteArgs
  ): Promise<PrismaEnergyEfficientCoding> {
    return this.prisma.energyEfficientCoding.delete(args);
  }
}
