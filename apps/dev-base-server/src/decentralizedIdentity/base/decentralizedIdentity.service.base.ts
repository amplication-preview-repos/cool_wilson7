/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DecentralizedIdentity as PrismaDecentralizedIdentity,
} from "@prisma/client";

export class DecentralizedIdentityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DecentralizedIdentityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.decentralizedIdentity.count(args);
  }

  async decentralizedIdentities(
    args: Prisma.DecentralizedIdentityFindManyArgs
  ): Promise<PrismaDecentralizedIdentity[]> {
    return this.prisma.decentralizedIdentity.findMany(args);
  }
  async decentralizedIdentity(
    args: Prisma.DecentralizedIdentityFindUniqueArgs
  ): Promise<PrismaDecentralizedIdentity | null> {
    return this.prisma.decentralizedIdentity.findUnique(args);
  }
  async createDecentralizedIdentity(
    args: Prisma.DecentralizedIdentityCreateArgs
  ): Promise<PrismaDecentralizedIdentity> {
    return this.prisma.decentralizedIdentity.create(args);
  }
  async updateDecentralizedIdentity(
    args: Prisma.DecentralizedIdentityUpdateArgs
  ): Promise<PrismaDecentralizedIdentity> {
    return this.prisma.decentralizedIdentity.update(args);
  }
  async deleteDecentralizedIdentity(
    args: Prisma.DecentralizedIdentityDeleteArgs
  ): Promise<PrismaDecentralizedIdentity> {
    return this.prisma.decentralizedIdentity.delete(args);
  }
}
