/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ArAppPrototyping as PrismaArAppPrototyping,
} from "@prisma/client";

export class ArAppPrototypingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ArAppPrototypingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.arAppPrototyping.count(args);
  }

  async arAppPrototypings(
    args: Prisma.ArAppPrototypingFindManyArgs
  ): Promise<PrismaArAppPrototyping[]> {
    return this.prisma.arAppPrototyping.findMany(args);
  }
  async arAppPrototyping(
    args: Prisma.ArAppPrototypingFindUniqueArgs
  ): Promise<PrismaArAppPrototyping | null> {
    return this.prisma.arAppPrototyping.findUnique(args);
  }
  async createArAppPrototyping(
    args: Prisma.ArAppPrototypingCreateArgs
  ): Promise<PrismaArAppPrototyping> {
    return this.prisma.arAppPrototyping.create(args);
  }
  async updateArAppPrototyping(
    args: Prisma.ArAppPrototypingUpdateArgs
  ): Promise<PrismaArAppPrototyping> {
    return this.prisma.arAppPrototyping.update(args);
  }
  async deleteArAppPrototyping(
    args: Prisma.ArAppPrototypingDeleteArgs
  ): Promise<PrismaArAppPrototyping> {
    return this.prisma.arAppPrototyping.delete(args);
  }
}
