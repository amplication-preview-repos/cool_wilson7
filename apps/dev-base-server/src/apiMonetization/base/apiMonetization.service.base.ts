/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ApiMonetization as PrismaApiMonetization,
} from "@prisma/client";

export class ApiMonetizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApiMonetizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.apiMonetization.count(args);
  }

  async apiMonetizations(
    args: Prisma.ApiMonetizationFindManyArgs
  ): Promise<PrismaApiMonetization[]> {
    return this.prisma.apiMonetization.findMany(args);
  }
  async apiMonetization(
    args: Prisma.ApiMonetizationFindUniqueArgs
  ): Promise<PrismaApiMonetization | null> {
    return this.prisma.apiMonetization.findUnique(args);
  }
  async createApiMonetization(
    args: Prisma.ApiMonetizationCreateArgs
  ): Promise<PrismaApiMonetization> {
    return this.prisma.apiMonetization.create(args);
  }
  async updateApiMonetization(
    args: Prisma.ApiMonetizationUpdateArgs
  ): Promise<PrismaApiMonetization> {
    return this.prisma.apiMonetization.update(args);
  }
  async deleteApiMonetization(
    args: Prisma.ApiMonetizationDeleteArgs
  ): Promise<PrismaApiMonetization> {
    return this.prisma.apiMonetization.delete(args);
  }
}
