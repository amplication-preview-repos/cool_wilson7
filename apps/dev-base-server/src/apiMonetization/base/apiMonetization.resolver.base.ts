/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ApiMonetization } from "./ApiMonetization";
import { ApiMonetizationCountArgs } from "./ApiMonetizationCountArgs";
import { ApiMonetizationFindManyArgs } from "./ApiMonetizationFindManyArgs";
import { ApiMonetizationFindUniqueArgs } from "./ApiMonetizationFindUniqueArgs";
import { DeleteApiMonetizationArgs } from "./DeleteApiMonetizationArgs";
import { ApiMonetizationService } from "../apiMonetization.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApiMonetization)
export class ApiMonetizationResolverBase {
  constructor(
    protected readonly service: ApiMonetizationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApiMonetization",
    action: "read",
    possession: "any",
  })
  async _apiMonetizationsMeta(
    @graphql.Args() args: ApiMonetizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApiMonetization])
  @nestAccessControl.UseRoles({
    resource: "ApiMonetization",
    action: "read",
    possession: "any",
  })
  async apiMonetizations(
    @graphql.Args() args: ApiMonetizationFindManyArgs
  ): Promise<ApiMonetization[]> {
    return this.service.apiMonetizations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApiMonetization, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApiMonetization",
    action: "read",
    possession: "own",
  })
  async apiMonetization(
    @graphql.Args() args: ApiMonetizationFindUniqueArgs
  ): Promise<ApiMonetization | null> {
    const result = await this.service.apiMonetization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApiMonetization)
  @nestAccessControl.UseRoles({
    resource: "ApiMonetization",
    action: "delete",
    possession: "any",
  })
  async deleteApiMonetization(
    @graphql.Args() args: DeleteApiMonetizationArgs
  ): Promise<ApiMonetization | null> {
    try {
      return await this.service.deleteApiMonetization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
