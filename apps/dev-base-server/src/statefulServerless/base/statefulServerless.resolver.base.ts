/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { StatefulServerless } from "./StatefulServerless";
import { StatefulServerlessCountArgs } from "./StatefulServerlessCountArgs";
import { StatefulServerlessFindManyArgs } from "./StatefulServerlessFindManyArgs";
import { StatefulServerlessFindUniqueArgs } from "./StatefulServerlessFindUniqueArgs";
import { DeleteStatefulServerlessArgs } from "./DeleteStatefulServerlessArgs";
import { StatefulServerlessService } from "../statefulServerless.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StatefulServerless)
export class StatefulServerlessResolverBase {
  constructor(
    protected readonly service: StatefulServerlessService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StatefulServerless",
    action: "read",
    possession: "any",
  })
  async _statefulServerlessesMeta(
    @graphql.Args() args: StatefulServerlessCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StatefulServerless])
  @nestAccessControl.UseRoles({
    resource: "StatefulServerless",
    action: "read",
    possession: "any",
  })
  async statefulServerlesses(
    @graphql.Args() args: StatefulServerlessFindManyArgs
  ): Promise<StatefulServerless[]> {
    return this.service.statefulServerlesses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StatefulServerless, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StatefulServerless",
    action: "read",
    possession: "own",
  })
  async statefulServerless(
    @graphql.Args() args: StatefulServerlessFindUniqueArgs
  ): Promise<StatefulServerless | null> {
    const result = await this.service.statefulServerless(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StatefulServerless)
  @nestAccessControl.UseRoles({
    resource: "StatefulServerless",
    action: "delete",
    possession: "any",
  })
  async deleteStatefulServerless(
    @graphql.Args() args: DeleteStatefulServerlessArgs
  ): Promise<StatefulServerless | null> {
    try {
      return await this.service.deleteStatefulServerless(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
