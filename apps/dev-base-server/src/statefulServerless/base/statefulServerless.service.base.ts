/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  StatefulServerless as PrismaStatefulServerless,
} from "@prisma/client";

export class StatefulServerlessServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StatefulServerlessCountArgs, "select">
  ): Promise<number> {
    return this.prisma.statefulServerless.count(args);
  }

  async statefulServerlesses(
    args: Prisma.StatefulServerlessFindManyArgs
  ): Promise<PrismaStatefulServerless[]> {
    return this.prisma.statefulServerless.findMany(args);
  }
  async statefulServerless(
    args: Prisma.StatefulServerlessFindUniqueArgs
  ): Promise<PrismaStatefulServerless | null> {
    return this.prisma.statefulServerless.findUnique(args);
  }
  async createStatefulServerless(
    args: Prisma.StatefulServerlessCreateArgs
  ): Promise<PrismaStatefulServerless> {
    return this.prisma.statefulServerless.create(args);
  }
  async updateStatefulServerless(
    args: Prisma.StatefulServerlessUpdateArgs
  ): Promise<PrismaStatefulServerless> {
    return this.prisma.statefulServerless.update(args);
  }
  async deleteStatefulServerless(
    args: Prisma.StatefulServerlessDeleteArgs
  ): Promise<PrismaStatefulServerless> {
    return this.prisma.statefulServerless.delete(args);
  }
}
