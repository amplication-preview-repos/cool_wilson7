/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RealTimeDatabaseService } from "../realTimeDatabase.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RealTimeDatabaseCreateInput } from "./RealTimeDatabaseCreateInput";
import { RealTimeDatabase } from "./RealTimeDatabase";
import { RealTimeDatabaseFindManyArgs } from "./RealTimeDatabaseFindManyArgs";
import { RealTimeDatabaseWhereUniqueInput } from "./RealTimeDatabaseWhereUniqueInput";
import { RealTimeDatabaseUpdateInput } from "./RealTimeDatabaseUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RealTimeDatabaseControllerBase {
  constructor(
    protected readonly service: RealTimeDatabaseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RealTimeDatabase })
  @nestAccessControl.UseRoles({
    resource: "RealTimeDatabase",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: RealTimeDatabaseCreateInput,
  })
  async createRealTimeDatabase(
    @common.Body() data: RealTimeDatabaseCreateInput
  ): Promise<RealTimeDatabase> {
    return await this.service.createRealTimeDatabase({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [RealTimeDatabase] })
  @ApiNestedQuery(RealTimeDatabaseFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RealTimeDatabase",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async realTimeDatabases(
    @common.Req() request: Request
  ): Promise<RealTimeDatabase[]> {
    const args = plainToClass(RealTimeDatabaseFindManyArgs, request.query);
    return this.service.realTimeDatabases({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RealTimeDatabase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RealTimeDatabase",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async realTimeDatabase(
    @common.Param() params: RealTimeDatabaseWhereUniqueInput
  ): Promise<RealTimeDatabase | null> {
    const result = await this.service.realTimeDatabase({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RealTimeDatabase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RealTimeDatabase",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: RealTimeDatabaseUpdateInput,
  })
  async updateRealTimeDatabase(
    @common.Param() params: RealTimeDatabaseWhereUniqueInput,
    @common.Body() data: RealTimeDatabaseUpdateInput
  ): Promise<RealTimeDatabase | null> {
    try {
      return await this.service.updateRealTimeDatabase({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RealTimeDatabase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RealTimeDatabase",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRealTimeDatabase(
    @common.Param() params: RealTimeDatabaseWhereUniqueInput
  ): Promise<RealTimeDatabase | null> {
    try {
      return await this.service.deleteRealTimeDatabase({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
