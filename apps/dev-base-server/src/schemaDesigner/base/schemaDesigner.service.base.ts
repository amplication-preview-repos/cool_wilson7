/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SchemaDesigner as PrismaSchemaDesigner } from "@prisma/client";

export class SchemaDesignerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SchemaDesignerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.schemaDesigner.count(args);
  }

  async schemaDesigners(
    args: Prisma.SchemaDesignerFindManyArgs
  ): Promise<PrismaSchemaDesigner[]> {
    return this.prisma.schemaDesigner.findMany(args);
  }
  async schemaDesigner(
    args: Prisma.SchemaDesignerFindUniqueArgs
  ): Promise<PrismaSchemaDesigner | null> {
    return this.prisma.schemaDesigner.findUnique(args);
  }
  async createSchemaDesigner(
    args: Prisma.SchemaDesignerCreateArgs
  ): Promise<PrismaSchemaDesigner> {
    return this.prisma.schemaDesigner.create(args);
  }
  async updateSchemaDesigner(
    args: Prisma.SchemaDesignerUpdateArgs
  ): Promise<PrismaSchemaDesigner> {
    return this.prisma.schemaDesigner.update(args);
  }
  async deleteSchemaDesigner(
    args: Prisma.SchemaDesignerDeleteArgs
  ): Promise<PrismaSchemaDesigner> {
    return this.prisma.schemaDesigner.delete(args);
  }
}
