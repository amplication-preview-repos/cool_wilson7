/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VoiceControlledDevelopment } from "./VoiceControlledDevelopment";
import { VoiceControlledDevelopmentCountArgs } from "./VoiceControlledDevelopmentCountArgs";
import { VoiceControlledDevelopmentFindManyArgs } from "./VoiceControlledDevelopmentFindManyArgs";
import { VoiceControlledDevelopmentFindUniqueArgs } from "./VoiceControlledDevelopmentFindUniqueArgs";
import { DeleteVoiceControlledDevelopmentArgs } from "./DeleteVoiceControlledDevelopmentArgs";
import { VoiceControlledDevelopmentService } from "../voiceControlledDevelopment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VoiceControlledDevelopment)
export class VoiceControlledDevelopmentResolverBase {
  constructor(
    protected readonly service: VoiceControlledDevelopmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VoiceControlledDevelopment",
    action: "read",
    possession: "any",
  })
  async _voiceControlledDevelopmentsMeta(
    @graphql.Args() args: VoiceControlledDevelopmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VoiceControlledDevelopment])
  @nestAccessControl.UseRoles({
    resource: "VoiceControlledDevelopment",
    action: "read",
    possession: "any",
  })
  async voiceControlledDevelopments(
    @graphql.Args() args: VoiceControlledDevelopmentFindManyArgs
  ): Promise<VoiceControlledDevelopment[]> {
    return this.service.voiceControlledDevelopments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VoiceControlledDevelopment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VoiceControlledDevelopment",
    action: "read",
    possession: "own",
  })
  async voiceControlledDevelopment(
    @graphql.Args() args: VoiceControlledDevelopmentFindUniqueArgs
  ): Promise<VoiceControlledDevelopment | null> {
    const result = await this.service.voiceControlledDevelopment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VoiceControlledDevelopment)
  @nestAccessControl.UseRoles({
    resource: "VoiceControlledDevelopment",
    action: "delete",
    possession: "any",
  })
  async deleteVoiceControlledDevelopment(
    @graphql.Args() args: DeleteVoiceControlledDevelopmentArgs
  ): Promise<VoiceControlledDevelopment | null> {
    try {
      return await this.service.deleteVoiceControlledDevelopment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
