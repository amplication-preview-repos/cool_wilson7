/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VoiceControlledDevelopmentService } from "../voiceControlledDevelopment.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VoiceControlledDevelopmentCreateInput } from "./VoiceControlledDevelopmentCreateInput";
import { VoiceControlledDevelopment } from "./VoiceControlledDevelopment";
import { VoiceControlledDevelopmentFindManyArgs } from "./VoiceControlledDevelopmentFindManyArgs";
import { VoiceControlledDevelopmentWhereUniqueInput } from "./VoiceControlledDevelopmentWhereUniqueInput";
import { VoiceControlledDevelopmentUpdateInput } from "./VoiceControlledDevelopmentUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VoiceControlledDevelopmentControllerBase {
  constructor(
    protected readonly service: VoiceControlledDevelopmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VoiceControlledDevelopment })
  @nestAccessControl.UseRoles({
    resource: "VoiceControlledDevelopment",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVoiceControlledDevelopment(
    @common.Body() data: VoiceControlledDevelopmentCreateInput
  ): Promise<VoiceControlledDevelopment> {
    return await this.service.createVoiceControlledDevelopment({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [VoiceControlledDevelopment] })
  @ApiNestedQuery(VoiceControlledDevelopmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VoiceControlledDevelopment",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voiceControlledDevelopments(
    @common.Req() request: Request
  ): Promise<VoiceControlledDevelopment[]> {
    const args = plainToClass(
      VoiceControlledDevelopmentFindManyArgs,
      request.query
    );
    return this.service.voiceControlledDevelopments({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VoiceControlledDevelopment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoiceControlledDevelopment",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voiceControlledDevelopment(
    @common.Param() params: VoiceControlledDevelopmentWhereUniqueInput
  ): Promise<VoiceControlledDevelopment | null> {
    const result = await this.service.voiceControlledDevelopment({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VoiceControlledDevelopment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoiceControlledDevelopment",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVoiceControlledDevelopment(
    @common.Param() params: VoiceControlledDevelopmentWhereUniqueInput,
    @common.Body() data: VoiceControlledDevelopmentUpdateInput
  ): Promise<VoiceControlledDevelopment | null> {
    try {
      return await this.service.updateVoiceControlledDevelopment({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VoiceControlledDevelopment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoiceControlledDevelopment",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVoiceControlledDevelopment(
    @common.Param() params: VoiceControlledDevelopmentWhereUniqueInput
  ): Promise<VoiceControlledDevelopment | null> {
    try {
      return await this.service.deleteVoiceControlledDevelopment({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
