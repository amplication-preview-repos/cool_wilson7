/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BlockchainAuditTrails as PrismaBlockchainAuditTrails,
} from "@prisma/client";

export class BlockchainAuditTrailsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BlockchainAuditTrailsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.blockchainAuditTrails.count(args);
  }

  async blockchainAuditTrailsItems(
    args: Prisma.BlockchainAuditTrailsFindManyArgs
  ): Promise<PrismaBlockchainAuditTrails[]> {
    return this.prisma.blockchainAuditTrails.findMany(args);
  }
  async blockchainAuditTrails(
    args: Prisma.BlockchainAuditTrailsFindUniqueArgs
  ): Promise<PrismaBlockchainAuditTrails | null> {
    return this.prisma.blockchainAuditTrails.findUnique(args);
  }
  async createBlockchainAuditTrails(
    args: Prisma.BlockchainAuditTrailsCreateArgs
  ): Promise<PrismaBlockchainAuditTrails> {
    return this.prisma.blockchainAuditTrails.create(args);
  }
  async updateBlockchainAuditTrails(
    args: Prisma.BlockchainAuditTrailsUpdateArgs
  ): Promise<PrismaBlockchainAuditTrails> {
    return this.prisma.blockchainAuditTrails.update(args);
  }
  async deleteBlockchainAuditTrails(
    args: Prisma.BlockchainAuditTrailsDeleteArgs
  ): Promise<PrismaBlockchainAuditTrails> {
    return this.prisma.blockchainAuditTrails.delete(args);
  }
}
