/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  StreamProcessing as PrismaStreamProcessing,
} from "@prisma/client";

export class StreamProcessingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StreamProcessingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.streamProcessing.count(args);
  }

  async streamProcessings(
    args: Prisma.StreamProcessingFindManyArgs
  ): Promise<PrismaStreamProcessing[]> {
    return this.prisma.streamProcessing.findMany(args);
  }
  async streamProcessing(
    args: Prisma.StreamProcessingFindUniqueArgs
  ): Promise<PrismaStreamProcessing | null> {
    return this.prisma.streamProcessing.findUnique(args);
  }
  async createStreamProcessing(
    args: Prisma.StreamProcessingCreateArgs
  ): Promise<PrismaStreamProcessing> {
    return this.prisma.streamProcessing.create(args);
  }
  async updateStreamProcessing(
    args: Prisma.StreamProcessingUpdateArgs
  ): Promise<PrismaStreamProcessing> {
    return this.prisma.streamProcessing.update(args);
  }
  async deleteStreamProcessing(
    args: Prisma.StreamProcessingDeleteArgs
  ): Promise<PrismaStreamProcessing> {
    return this.prisma.streamProcessing.delete(args);
  }
}
