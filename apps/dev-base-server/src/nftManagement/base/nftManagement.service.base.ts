/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NftManagement as PrismaNftManagement } from "@prisma/client";

export class NftManagementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NftManagementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.nftManagement.count(args);
  }

  async nftManagements(
    args: Prisma.NftManagementFindManyArgs
  ): Promise<PrismaNftManagement[]> {
    return this.prisma.nftManagement.findMany(args);
  }
  async nftManagement(
    args: Prisma.NftManagementFindUniqueArgs
  ): Promise<PrismaNftManagement | null> {
    return this.prisma.nftManagement.findUnique(args);
  }
  async createNftManagement(
    args: Prisma.NftManagementCreateArgs
  ): Promise<PrismaNftManagement> {
    return this.prisma.nftManagement.create(args);
  }
  async updateNftManagement(
    args: Prisma.NftManagementUpdateArgs
  ): Promise<PrismaNftManagement> {
    return this.prisma.nftManagement.update(args);
  }
  async deleteNftManagement(
    args: Prisma.NftManagementDeleteArgs
  ): Promise<PrismaNftManagement> {
    return this.prisma.nftManagement.delete(args);
  }
}
