/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ApiDesign as PrismaApiDesign } from "@prisma/client";

export class ApiDesignServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApiDesignCountArgs, "select">
  ): Promise<number> {
    return this.prisma.apiDesign.count(args);
  }

  async apiDesigns(
    args: Prisma.ApiDesignFindManyArgs
  ): Promise<PrismaApiDesign[]> {
    return this.prisma.apiDesign.findMany(args);
  }
  async apiDesign(
    args: Prisma.ApiDesignFindUniqueArgs
  ): Promise<PrismaApiDesign | null> {
    return this.prisma.apiDesign.findUnique(args);
  }
  async createApiDesign(
    args: Prisma.ApiDesignCreateArgs
  ): Promise<PrismaApiDesign> {
    return this.prisma.apiDesign.create(args);
  }
  async updateApiDesign(
    args: Prisma.ApiDesignUpdateArgs
  ): Promise<PrismaApiDesign> {
    return this.prisma.apiDesign.update(args);
  }
  async deleteApiDesign(
    args: Prisma.ApiDesignDeleteArgs
  ): Promise<PrismaApiDesign> {
    return this.prisma.apiDesign.delete(args);
  }
}
