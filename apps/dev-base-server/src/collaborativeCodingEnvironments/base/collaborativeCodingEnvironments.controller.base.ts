/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CollaborativeCodingEnvironmentsService } from "../collaborativeCodingEnvironments.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CollaborativeCodingEnvironmentsCreateInput } from "./CollaborativeCodingEnvironmentsCreateInput";
import { CollaborativeCodingEnvironments } from "./CollaborativeCodingEnvironments";
import { CollaborativeCodingEnvironmentsFindManyArgs } from "./CollaborativeCodingEnvironmentsFindManyArgs";
import { CollaborativeCodingEnvironmentsWhereUniqueInput } from "./CollaborativeCodingEnvironmentsWhereUniqueInput";
import { CollaborativeCodingEnvironmentsUpdateInput } from "./CollaborativeCodingEnvironmentsUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CollaborativeCodingEnvironmentsControllerBase {
  constructor(
    protected readonly service: CollaborativeCodingEnvironmentsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CollaborativeCodingEnvironments })
  @nestAccessControl.UseRoles({
    resource: "CollaborativeCodingEnvironments",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCollaborativeCodingEnvironments(
    @common.Body() data: CollaborativeCodingEnvironmentsCreateInput
  ): Promise<CollaborativeCodingEnvironments> {
    return await this.service.createCollaborativeCodingEnvironments({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CollaborativeCodingEnvironments] })
  @ApiNestedQuery(CollaborativeCodingEnvironmentsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CollaborativeCodingEnvironments",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async collaborativeCodingEnvironmentsItems(
    @common.Req() request: Request
  ): Promise<CollaborativeCodingEnvironments[]> {
    const args = plainToClass(
      CollaborativeCodingEnvironmentsFindManyArgs,
      request.query
    );
    return this.service.collaborativeCodingEnvironmentsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CollaborativeCodingEnvironments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CollaborativeCodingEnvironments",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async collaborativeCodingEnvironments(
    @common.Param() params: CollaborativeCodingEnvironmentsWhereUniqueInput
  ): Promise<CollaborativeCodingEnvironments | null> {
    const result = await this.service.collaborativeCodingEnvironments({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CollaborativeCodingEnvironments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CollaborativeCodingEnvironments",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCollaborativeCodingEnvironments(
    @common.Param() params: CollaborativeCodingEnvironmentsWhereUniqueInput,
    @common.Body() data: CollaborativeCodingEnvironmentsUpdateInput
  ): Promise<CollaborativeCodingEnvironments | null> {
    try {
      return await this.service.updateCollaborativeCodingEnvironments({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CollaborativeCodingEnvironments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CollaborativeCodingEnvironments",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCollaborativeCodingEnvironments(
    @common.Param() params: CollaborativeCodingEnvironmentsWhereUniqueInput
  ): Promise<CollaborativeCodingEnvironments | null> {
    try {
      return await this.service.deleteCollaborativeCodingEnvironments({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
