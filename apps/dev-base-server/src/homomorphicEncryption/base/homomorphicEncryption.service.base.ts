/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  HomomorphicEncryption as PrismaHomomorphicEncryption,
} from "@prisma/client";

export class HomomorphicEncryptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HomomorphicEncryptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.homomorphicEncryption.count(args);
  }

  async homomorphicEncryptions(
    args: Prisma.HomomorphicEncryptionFindManyArgs
  ): Promise<PrismaHomomorphicEncryption[]> {
    return this.prisma.homomorphicEncryption.findMany(args);
  }
  async homomorphicEncryption(
    args: Prisma.HomomorphicEncryptionFindUniqueArgs
  ): Promise<PrismaHomomorphicEncryption | null> {
    return this.prisma.homomorphicEncryption.findUnique(args);
  }
  async createHomomorphicEncryption(
    args: Prisma.HomomorphicEncryptionCreateArgs
  ): Promise<PrismaHomomorphicEncryption> {
    return this.prisma.homomorphicEncryption.create(args);
  }
  async updateHomomorphicEncryption(
    args: Prisma.HomomorphicEncryptionUpdateArgs
  ): Promise<PrismaHomomorphicEncryption> {
    return this.prisma.homomorphicEncryption.update(args);
  }
  async deleteHomomorphicEncryption(
    args: Prisma.HomomorphicEncryptionDeleteArgs
  ): Promise<PrismaHomomorphicEncryption> {
    return this.prisma.homomorphicEncryption.delete(args);
  }
}
