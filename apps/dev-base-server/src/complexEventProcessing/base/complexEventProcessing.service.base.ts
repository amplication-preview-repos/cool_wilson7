/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ComplexEventProcessing as PrismaComplexEventProcessing,
} from "@prisma/client";

export class ComplexEventProcessingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComplexEventProcessingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.complexEventProcessing.count(args);
  }

  async complexEventProcessings(
    args: Prisma.ComplexEventProcessingFindManyArgs
  ): Promise<PrismaComplexEventProcessing[]> {
    return this.prisma.complexEventProcessing.findMany(args);
  }
  async complexEventProcessing(
    args: Prisma.ComplexEventProcessingFindUniqueArgs
  ): Promise<PrismaComplexEventProcessing | null> {
    return this.prisma.complexEventProcessing.findUnique(args);
  }
  async createComplexEventProcessing(
    args: Prisma.ComplexEventProcessingCreateArgs
  ): Promise<PrismaComplexEventProcessing> {
    return this.prisma.complexEventProcessing.create(args);
  }
  async updateComplexEventProcessing(
    args: Prisma.ComplexEventProcessingUpdateArgs
  ): Promise<PrismaComplexEventProcessing> {
    return this.prisma.complexEventProcessing.update(args);
  }
  async deleteComplexEventProcessing(
    args: Prisma.ComplexEventProcessingDeleteArgs
  ): Promise<PrismaComplexEventProcessing> {
    return this.prisma.complexEventProcessing.delete(args);
  }
}
