/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GamificationElements as PrismaGamificationElements,
} from "@prisma/client";

export class GamificationElementsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GamificationElementsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gamificationElements.count(args);
  }

  async gamificationElementsItems(
    args: Prisma.GamificationElementsFindManyArgs
  ): Promise<PrismaGamificationElements[]> {
    return this.prisma.gamificationElements.findMany(args);
  }
  async gamificationElements(
    args: Prisma.GamificationElementsFindUniqueArgs
  ): Promise<PrismaGamificationElements | null> {
    return this.prisma.gamificationElements.findUnique(args);
  }
  async createGamificationElements(
    args: Prisma.GamificationElementsCreateArgs
  ): Promise<PrismaGamificationElements> {
    return this.prisma.gamificationElements.create(args);
  }
  async updateGamificationElements(
    args: Prisma.GamificationElementsUpdateArgs
  ): Promise<PrismaGamificationElements> {
    return this.prisma.gamificationElements.update(args);
  }
  async deleteGamificationElements(
    args: Prisma.GamificationElementsDeleteArgs
  ): Promise<PrismaGamificationElements> {
    return this.prisma.gamificationElements.delete(args);
  }
}
