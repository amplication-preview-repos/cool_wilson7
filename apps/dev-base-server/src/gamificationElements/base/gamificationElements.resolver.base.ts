/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GamificationElements } from "./GamificationElements";
import { GamificationElementsCountArgs } from "./GamificationElementsCountArgs";
import { GamificationElementsFindManyArgs } from "./GamificationElementsFindManyArgs";
import { GamificationElementsFindUniqueArgs } from "./GamificationElementsFindUniqueArgs";
import { DeleteGamificationElementsArgs } from "./DeleteGamificationElementsArgs";
import { GamificationElementsService } from "../gamificationElements.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GamificationElements)
export class GamificationElementsResolverBase {
  constructor(
    protected readonly service: GamificationElementsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GamificationElements",
    action: "read",
    possession: "any",
  })
  async _gamificationElementsItemsMeta(
    @graphql.Args() args: GamificationElementsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GamificationElements])
  @nestAccessControl.UseRoles({
    resource: "GamificationElements",
    action: "read",
    possession: "any",
  })
  async gamificationElementsItems(
    @graphql.Args() args: GamificationElementsFindManyArgs
  ): Promise<GamificationElements[]> {
    return this.service.gamificationElementsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GamificationElements, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GamificationElements",
    action: "read",
    possession: "own",
  })
  async gamificationElements(
    @graphql.Args() args: GamificationElementsFindUniqueArgs
  ): Promise<GamificationElements | null> {
    const result = await this.service.gamificationElements(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GamificationElements)
  @nestAccessControl.UseRoles({
    resource: "GamificationElements",
    action: "delete",
    possession: "any",
  })
  async deleteGamificationElements(
    @graphql.Args() args: DeleteGamificationElementsArgs
  ): Promise<GamificationElements | null> {
    try {
      return await this.service.deleteGamificationElements(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
