/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DatabaseQueryOptimization } from "./DatabaseQueryOptimization";
import { DatabaseQueryOptimizationCountArgs } from "./DatabaseQueryOptimizationCountArgs";
import { DatabaseQueryOptimizationFindManyArgs } from "./DatabaseQueryOptimizationFindManyArgs";
import { DatabaseQueryOptimizationFindUniqueArgs } from "./DatabaseQueryOptimizationFindUniqueArgs";
import { DeleteDatabaseQueryOptimizationArgs } from "./DeleteDatabaseQueryOptimizationArgs";
import { DatabaseQueryOptimizationService } from "../databaseQueryOptimization.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DatabaseQueryOptimization)
export class DatabaseQueryOptimizationResolverBase {
  constructor(
    protected readonly service: DatabaseQueryOptimizationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DatabaseQueryOptimization",
    action: "read",
    possession: "any",
  })
  async _databaseQueryOptimizationsMeta(
    @graphql.Args() args: DatabaseQueryOptimizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DatabaseQueryOptimization])
  @nestAccessControl.UseRoles({
    resource: "DatabaseQueryOptimization",
    action: "read",
    possession: "any",
  })
  async databaseQueryOptimizations(
    @graphql.Args() args: DatabaseQueryOptimizationFindManyArgs
  ): Promise<DatabaseQueryOptimization[]> {
    return this.service.databaseQueryOptimizations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DatabaseQueryOptimization, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DatabaseQueryOptimization",
    action: "read",
    possession: "own",
  })
  async databaseQueryOptimization(
    @graphql.Args() args: DatabaseQueryOptimizationFindUniqueArgs
  ): Promise<DatabaseQueryOptimization | null> {
    const result = await this.service.databaseQueryOptimization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DatabaseQueryOptimization)
  @nestAccessControl.UseRoles({
    resource: "DatabaseQueryOptimization",
    action: "delete",
    possession: "any",
  })
  async deleteDatabaseQueryOptimization(
    @graphql.Args() args: DeleteDatabaseQueryOptimizationArgs
  ): Promise<DatabaseQueryOptimization | null> {
    try {
      return await this.service.deleteDatabaseQueryOptimization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
