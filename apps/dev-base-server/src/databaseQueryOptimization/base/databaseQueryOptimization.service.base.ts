/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DatabaseQueryOptimization as PrismaDatabaseQueryOptimization,
} from "@prisma/client";

export class DatabaseQueryOptimizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DatabaseQueryOptimizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.databaseQueryOptimization.count(args);
  }

  async databaseQueryOptimizations(
    args: Prisma.DatabaseQueryOptimizationFindManyArgs
  ): Promise<PrismaDatabaseQueryOptimization[]> {
    return this.prisma.databaseQueryOptimization.findMany(args);
  }
  async databaseQueryOptimization(
    args: Prisma.DatabaseQueryOptimizationFindUniqueArgs
  ): Promise<PrismaDatabaseQueryOptimization | null> {
    return this.prisma.databaseQueryOptimization.findUnique(args);
  }
  async createDatabaseQueryOptimization(
    args: Prisma.DatabaseQueryOptimizationCreateArgs
  ): Promise<PrismaDatabaseQueryOptimization> {
    return this.prisma.databaseQueryOptimization.create(args);
  }
  async updateDatabaseQueryOptimization(
    args: Prisma.DatabaseQueryOptimizationUpdateArgs
  ): Promise<PrismaDatabaseQueryOptimization> {
    return this.prisma.databaseQueryOptimization.update(args);
  }
  async deleteDatabaseQueryOptimization(
    args: Prisma.DatabaseQueryOptimizationDeleteArgs
  ): Promise<PrismaDatabaseQueryOptimization> {
    return this.prisma.databaseQueryOptimization.delete(args);
  }
}
