/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DecentralizedStorage } from "./DecentralizedStorage";
import { DecentralizedStorageCountArgs } from "./DecentralizedStorageCountArgs";
import { DecentralizedStorageFindManyArgs } from "./DecentralizedStorageFindManyArgs";
import { DecentralizedStorageFindUniqueArgs } from "./DecentralizedStorageFindUniqueArgs";
import { DeleteDecentralizedStorageArgs } from "./DeleteDecentralizedStorageArgs";
import { DecentralizedStorageService } from "../decentralizedStorage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DecentralizedStorage)
export class DecentralizedStorageResolverBase {
  constructor(
    protected readonly service: DecentralizedStorageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DecentralizedStorage",
    action: "read",
    possession: "any",
  })
  async _decentralizedStoragesMeta(
    @graphql.Args() args: DecentralizedStorageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DecentralizedStorage])
  @nestAccessControl.UseRoles({
    resource: "DecentralizedStorage",
    action: "read",
    possession: "any",
  })
  async decentralizedStorages(
    @graphql.Args() args: DecentralizedStorageFindManyArgs
  ): Promise<DecentralizedStorage[]> {
    return this.service.decentralizedStorages(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DecentralizedStorage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DecentralizedStorage",
    action: "read",
    possession: "own",
  })
  async decentralizedStorage(
    @graphql.Args() args: DecentralizedStorageFindUniqueArgs
  ): Promise<DecentralizedStorage | null> {
    const result = await this.service.decentralizedStorage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DecentralizedStorage)
  @nestAccessControl.UseRoles({
    resource: "DecentralizedStorage",
    action: "delete",
    possession: "any",
  })
  async deleteDecentralizedStorage(
    @graphql.Args() args: DeleteDecentralizedStorageArgs
  ): Promise<DecentralizedStorage | null> {
    try {
      return await this.service.deleteDecentralizedStorage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
