/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DecentralizedStorage as PrismaDecentralizedStorage,
} from "@prisma/client";

export class DecentralizedStorageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DecentralizedStorageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.decentralizedStorage.count(args);
  }

  async decentralizedStorages(
    args: Prisma.DecentralizedStorageFindManyArgs
  ): Promise<PrismaDecentralizedStorage[]> {
    return this.prisma.decentralizedStorage.findMany(args);
  }
  async decentralizedStorage(
    args: Prisma.DecentralizedStorageFindUniqueArgs
  ): Promise<PrismaDecentralizedStorage | null> {
    return this.prisma.decentralizedStorage.findUnique(args);
  }
  async createDecentralizedStorage(
    args: Prisma.DecentralizedStorageCreateArgs
  ): Promise<PrismaDecentralizedStorage> {
    return this.prisma.decentralizedStorage.create(args);
  }
  async updateDecentralizedStorage(
    args: Prisma.DecentralizedStorageUpdateArgs
  ): Promise<PrismaDecentralizedStorage> {
    return this.prisma.decentralizedStorage.update(args);
  }
  async deleteDecentralizedStorage(
    args: Prisma.DecentralizedStorageDeleteArgs
  ): Promise<PrismaDecentralizedStorage> {
    return this.prisma.decentralizedStorage.delete(args);
  }
}
