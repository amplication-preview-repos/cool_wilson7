/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ServerlessContainers as PrismaServerlessContainers,
} from "@prisma/client";

export class ServerlessContainersServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServerlessContainersCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serverlessContainers.count(args);
  }

  async serverlessContainersItems(
    args: Prisma.ServerlessContainersFindManyArgs
  ): Promise<PrismaServerlessContainers[]> {
    return this.prisma.serverlessContainers.findMany(args);
  }
  async serverlessContainers(
    args: Prisma.ServerlessContainersFindUniqueArgs
  ): Promise<PrismaServerlessContainers | null> {
    return this.prisma.serverlessContainers.findUnique(args);
  }
  async createServerlessContainers(
    args: Prisma.ServerlessContainersCreateArgs
  ): Promise<PrismaServerlessContainers> {
    return this.prisma.serverlessContainers.create(args);
  }
  async updateServerlessContainers(
    args: Prisma.ServerlessContainersUpdateArgs
  ): Promise<PrismaServerlessContainers> {
    return this.prisma.serverlessContainers.update(args);
  }
  async deleteServerlessContainers(
    args: Prisma.ServerlessContainersDeleteArgs
  ): Promise<PrismaServerlessContainers> {
    return this.prisma.serverlessContainers.delete(args);
  }
}
