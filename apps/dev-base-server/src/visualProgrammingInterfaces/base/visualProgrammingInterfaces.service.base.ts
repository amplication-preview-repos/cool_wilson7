/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  VisualProgrammingInterfaces as PrismaVisualProgrammingInterfaces,
} from "@prisma/client";

export class VisualProgrammingInterfacesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VisualProgrammingInterfacesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.visualProgrammingInterfaces.count(args);
  }

  async visualProgrammingInterfacesItems(
    args: Prisma.VisualProgrammingInterfacesFindManyArgs
  ): Promise<PrismaVisualProgrammingInterfaces[]> {
    return this.prisma.visualProgrammingInterfaces.findMany(args);
  }
  async visualProgrammingInterfaces(
    args: Prisma.VisualProgrammingInterfacesFindUniqueArgs
  ): Promise<PrismaVisualProgrammingInterfaces | null> {
    return this.prisma.visualProgrammingInterfaces.findUnique(args);
  }
  async createVisualProgrammingInterfaces(
    args: Prisma.VisualProgrammingInterfacesCreateArgs
  ): Promise<PrismaVisualProgrammingInterfaces> {
    return this.prisma.visualProgrammingInterfaces.create(args);
  }
  async updateVisualProgrammingInterfaces(
    args: Prisma.VisualProgrammingInterfacesUpdateArgs
  ): Promise<PrismaVisualProgrammingInterfaces> {
    return this.prisma.visualProgrammingInterfaces.update(args);
  }
  async deleteVisualProgrammingInterfaces(
    args: Prisma.VisualProgrammingInterfacesDeleteArgs
  ): Promise<PrismaVisualProgrammingInterfaces> {
    return this.prisma.visualProgrammingInterfaces.delete(args);
  }
}
