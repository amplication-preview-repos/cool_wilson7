/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AIassistedPairProgramming } from "./AIassistedPairProgramming";
import { AIassistedPairProgrammingCountArgs } from "./AIassistedPairProgrammingCountArgs";
import { AIassistedPairProgrammingFindManyArgs } from "./AIassistedPairProgrammingFindManyArgs";
import { AIassistedPairProgrammingFindUniqueArgs } from "./AIassistedPairProgrammingFindUniqueArgs";
import { DeleteAIassistedPairProgrammingArgs } from "./DeleteAIassistedPairProgrammingArgs";
import { AIassistedPairProgrammingService } from "../aIassistedPairProgramming.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AIassistedPairProgramming)
export class AIassistedPairProgrammingResolverBase {
  constructor(
    protected readonly service: AIassistedPairProgrammingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AIassistedPairProgramming",
    action: "read",
    possession: "any",
  })
  async _aIassistedPairProgrammingsMeta(
    @graphql.Args() args: AIassistedPairProgrammingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AIassistedPairProgramming])
  @nestAccessControl.UseRoles({
    resource: "AIassistedPairProgramming",
    action: "read",
    possession: "any",
  })
  async aIassistedPairProgrammings(
    @graphql.Args() args: AIassistedPairProgrammingFindManyArgs
  ): Promise<AIassistedPairProgramming[]> {
    return this.service.aIassistedPairProgrammings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AIassistedPairProgramming, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AIassistedPairProgramming",
    action: "read",
    possession: "own",
  })
  async aIassistedPairProgramming(
    @graphql.Args() args: AIassistedPairProgrammingFindUniqueArgs
  ): Promise<AIassistedPairProgramming | null> {
    const result = await this.service.aIassistedPairProgramming(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AIassistedPairProgramming)
  @nestAccessControl.UseRoles({
    resource: "AIassistedPairProgramming",
    action: "delete",
    possession: "any",
  })
  async deleteAIassistedPairProgramming(
    @graphql.Args() args: DeleteAIassistedPairProgrammingArgs
  ): Promise<AIassistedPairProgramming | null> {
    try {
      return await this.service.deleteAIassistedPairProgramming(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
