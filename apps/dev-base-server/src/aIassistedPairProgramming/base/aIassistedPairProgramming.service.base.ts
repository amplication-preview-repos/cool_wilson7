/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AIassistedPairProgramming as PrismaAIassistedPairProgramming,
} from "@prisma/client";

export class AIassistedPairProgrammingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AIassistedPairProgrammingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aIassistedPairProgramming.count(args);
  }

  async aIassistedPairProgrammings(
    args: Prisma.AIassistedPairProgrammingFindManyArgs
  ): Promise<PrismaAIassistedPairProgramming[]> {
    return this.prisma.aIassistedPairProgramming.findMany(args);
  }
  async aIassistedPairProgramming(
    args: Prisma.AIassistedPairProgrammingFindUniqueArgs
  ): Promise<PrismaAIassistedPairProgramming | null> {
    return this.prisma.aIassistedPairProgramming.findUnique(args);
  }
  async createAIassistedPairProgramming(
    args: Prisma.AIassistedPairProgrammingCreateArgs
  ): Promise<PrismaAIassistedPairProgramming> {
    return this.prisma.aIassistedPairProgramming.create(args);
  }
  async updateAIassistedPairProgramming(
    args: Prisma.AIassistedPairProgrammingUpdateArgs
  ): Promise<PrismaAIassistedPairProgramming> {
    return this.prisma.aIassistedPairProgramming.update(args);
  }
  async deleteAIassistedPairProgramming(
    args: Prisma.AIassistedPairProgrammingDeleteArgs
  ): Promise<PrismaAIassistedPairProgramming> {
    return this.prisma.aIassistedPairProgramming.delete(args);
  }
}
