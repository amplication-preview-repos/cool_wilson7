/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CryptoPaymentProcessingService } from "../cryptoPaymentProcessing.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CryptoPaymentProcessingCreateInput } from "./CryptoPaymentProcessingCreateInput";
import { CryptoPaymentProcessing } from "./CryptoPaymentProcessing";
import { CryptoPaymentProcessingFindManyArgs } from "./CryptoPaymentProcessingFindManyArgs";
import { CryptoPaymentProcessingWhereUniqueInput } from "./CryptoPaymentProcessingWhereUniqueInput";
import { CryptoPaymentProcessingUpdateInput } from "./CryptoPaymentProcessingUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CryptoPaymentProcessingControllerBase {
  constructor(
    protected readonly service: CryptoPaymentProcessingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CryptoPaymentProcessing })
  @nestAccessControl.UseRoles({
    resource: "CryptoPaymentProcessing",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCryptoPaymentProcessing(
    @common.Body() data: CryptoPaymentProcessingCreateInput
  ): Promise<CryptoPaymentProcessing> {
    return await this.service.createCryptoPaymentProcessing({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CryptoPaymentProcessing] })
  @ApiNestedQuery(CryptoPaymentProcessingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CryptoPaymentProcessing",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cryptoPaymentProcessings(
    @common.Req() request: Request
  ): Promise<CryptoPaymentProcessing[]> {
    const args = plainToClass(
      CryptoPaymentProcessingFindManyArgs,
      request.query
    );
    return this.service.cryptoPaymentProcessings({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CryptoPaymentProcessing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CryptoPaymentProcessing",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cryptoPaymentProcessing(
    @common.Param() params: CryptoPaymentProcessingWhereUniqueInput
  ): Promise<CryptoPaymentProcessing | null> {
    const result = await this.service.cryptoPaymentProcessing({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CryptoPaymentProcessing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CryptoPaymentProcessing",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCryptoPaymentProcessing(
    @common.Param() params: CryptoPaymentProcessingWhereUniqueInput,
    @common.Body() data: CryptoPaymentProcessingUpdateInput
  ): Promise<CryptoPaymentProcessing | null> {
    try {
      return await this.service.updateCryptoPaymentProcessing({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CryptoPaymentProcessing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CryptoPaymentProcessing",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCryptoPaymentProcessing(
    @common.Param() params: CryptoPaymentProcessingWhereUniqueInput
  ): Promise<CryptoPaymentProcessing | null> {
    try {
      return await this.service.deleteCryptoPaymentProcessing({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
