/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CryptoPaymentProcessing as PrismaCryptoPaymentProcessing,
} from "@prisma/client";

export class CryptoPaymentProcessingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CryptoPaymentProcessingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cryptoPaymentProcessing.count(args);
  }

  async cryptoPaymentProcessings(
    args: Prisma.CryptoPaymentProcessingFindManyArgs
  ): Promise<PrismaCryptoPaymentProcessing[]> {
    return this.prisma.cryptoPaymentProcessing.findMany(args);
  }
  async cryptoPaymentProcessing(
    args: Prisma.CryptoPaymentProcessingFindUniqueArgs
  ): Promise<PrismaCryptoPaymentProcessing | null> {
    return this.prisma.cryptoPaymentProcessing.findUnique(args);
  }
  async createCryptoPaymentProcessing(
    args: Prisma.CryptoPaymentProcessingCreateArgs
  ): Promise<PrismaCryptoPaymentProcessing> {
    return this.prisma.cryptoPaymentProcessing.create(args);
  }
  async updateCryptoPaymentProcessing(
    args: Prisma.CryptoPaymentProcessingUpdateArgs
  ): Promise<PrismaCryptoPaymentProcessing> {
    return this.prisma.cryptoPaymentProcessing.update(args);
  }
  async deleteCryptoPaymentProcessing(
    args: Prisma.CryptoPaymentProcessingDeleteArgs
  ): Promise<PrismaCryptoPaymentProcessing> {
    return this.prisma.cryptoPaymentProcessing.delete(args);
  }
}
