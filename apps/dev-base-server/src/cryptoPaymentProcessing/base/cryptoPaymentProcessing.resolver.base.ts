/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CryptoPaymentProcessing } from "./CryptoPaymentProcessing";
import { CryptoPaymentProcessingCountArgs } from "./CryptoPaymentProcessingCountArgs";
import { CryptoPaymentProcessingFindManyArgs } from "./CryptoPaymentProcessingFindManyArgs";
import { CryptoPaymentProcessingFindUniqueArgs } from "./CryptoPaymentProcessingFindUniqueArgs";
import { DeleteCryptoPaymentProcessingArgs } from "./DeleteCryptoPaymentProcessingArgs";
import { CryptoPaymentProcessingService } from "../cryptoPaymentProcessing.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CryptoPaymentProcessing)
export class CryptoPaymentProcessingResolverBase {
  constructor(
    protected readonly service: CryptoPaymentProcessingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CryptoPaymentProcessing",
    action: "read",
    possession: "any",
  })
  async _cryptoPaymentProcessingsMeta(
    @graphql.Args() args: CryptoPaymentProcessingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CryptoPaymentProcessing])
  @nestAccessControl.UseRoles({
    resource: "CryptoPaymentProcessing",
    action: "read",
    possession: "any",
  })
  async cryptoPaymentProcessings(
    @graphql.Args() args: CryptoPaymentProcessingFindManyArgs
  ): Promise<CryptoPaymentProcessing[]> {
    return this.service.cryptoPaymentProcessings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CryptoPaymentProcessing, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CryptoPaymentProcessing",
    action: "read",
    possession: "own",
  })
  async cryptoPaymentProcessing(
    @graphql.Args() args: CryptoPaymentProcessingFindUniqueArgs
  ): Promise<CryptoPaymentProcessing | null> {
    const result = await this.service.cryptoPaymentProcessing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CryptoPaymentProcessing)
  @nestAccessControl.UseRoles({
    resource: "CryptoPaymentProcessing",
    action: "delete",
    possession: "any",
  })
  async deleteCryptoPaymentProcessing(
    @graphql.Args() args: DeleteCryptoPaymentProcessingArgs
  ): Promise<CryptoPaymentProcessing | null> {
    try {
      return await this.service.deleteCryptoPaymentProcessing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
