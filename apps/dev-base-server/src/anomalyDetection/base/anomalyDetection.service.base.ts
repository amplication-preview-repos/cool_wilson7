/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AnomalyDetection as PrismaAnomalyDetection,
} from "@prisma/client";

export class AnomalyDetectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnomalyDetectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.anomalyDetection.count(args);
  }

  async anomalyDetections(
    args: Prisma.AnomalyDetectionFindManyArgs
  ): Promise<PrismaAnomalyDetection[]> {
    return this.prisma.anomalyDetection.findMany(args);
  }
  async anomalyDetection(
    args: Prisma.AnomalyDetectionFindUniqueArgs
  ): Promise<PrismaAnomalyDetection | null> {
    return this.prisma.anomalyDetection.findUnique(args);
  }
  async createAnomalyDetection(
    args: Prisma.AnomalyDetectionCreateArgs
  ): Promise<PrismaAnomalyDetection> {
    return this.prisma.anomalyDetection.create(args);
  }
  async updateAnomalyDetection(
    args: Prisma.AnomalyDetectionUpdateArgs
  ): Promise<PrismaAnomalyDetection> {
    return this.prisma.anomalyDetection.update(args);
  }
  async deleteAnomalyDetection(
    args: Prisma.AnomalyDetectionDeleteArgs
  ): Promise<PrismaAnomalyDetection> {
    return this.prisma.anomalyDetection.delete(args);
  }
}
