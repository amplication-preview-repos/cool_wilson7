/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AnomalyDetectionService } from "../anomalyDetection.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AnomalyDetectionCreateInput } from "./AnomalyDetectionCreateInput";
import { AnomalyDetection } from "./AnomalyDetection";
import { AnomalyDetectionFindManyArgs } from "./AnomalyDetectionFindManyArgs";
import { AnomalyDetectionWhereUniqueInput } from "./AnomalyDetectionWhereUniqueInput";
import { AnomalyDetectionUpdateInput } from "./AnomalyDetectionUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AnomalyDetectionControllerBase {
  constructor(
    protected readonly service: AnomalyDetectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AnomalyDetection })
  @nestAccessControl.UseRoles({
    resource: "AnomalyDetection",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAnomalyDetection(
    @common.Body() data: AnomalyDetectionCreateInput
  ): Promise<AnomalyDetection> {
    return await this.service.createAnomalyDetection({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AnomalyDetection] })
  @ApiNestedQuery(AnomalyDetectionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AnomalyDetection",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async anomalyDetections(
    @common.Req() request: Request
  ): Promise<AnomalyDetection[]> {
    const args = plainToClass(AnomalyDetectionFindManyArgs, request.query);
    return this.service.anomalyDetections({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AnomalyDetection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnomalyDetection",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async anomalyDetection(
    @common.Param() params: AnomalyDetectionWhereUniqueInput
  ): Promise<AnomalyDetection | null> {
    const result = await this.service.anomalyDetection({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AnomalyDetection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnomalyDetection",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAnomalyDetection(
    @common.Param() params: AnomalyDetectionWhereUniqueInput,
    @common.Body() data: AnomalyDetectionUpdateInput
  ): Promise<AnomalyDetection | null> {
    try {
      return await this.service.updateAnomalyDetection({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AnomalyDetection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AnomalyDetection",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAnomalyDetection(
    @common.Param() params: AnomalyDetectionWhereUniqueInput
  ): Promise<AnomalyDetection | null> {
    try {
      return await this.service.deleteAnomalyDetection({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
