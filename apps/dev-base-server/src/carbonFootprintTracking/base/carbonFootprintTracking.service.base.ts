/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CarbonFootprintTracking as PrismaCarbonFootprintTracking,
} from "@prisma/client";

export class CarbonFootprintTrackingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CarbonFootprintTrackingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.carbonFootprintTracking.count(args);
  }

  async carbonFootprintTrackings(
    args: Prisma.CarbonFootprintTrackingFindManyArgs
  ): Promise<PrismaCarbonFootprintTracking[]> {
    return this.prisma.carbonFootprintTracking.findMany(args);
  }
  async carbonFootprintTracking(
    args: Prisma.CarbonFootprintTrackingFindUniqueArgs
  ): Promise<PrismaCarbonFootprintTracking | null> {
    return this.prisma.carbonFootprintTracking.findUnique(args);
  }
  async createCarbonFootprintTracking(
    args: Prisma.CarbonFootprintTrackingCreateArgs
  ): Promise<PrismaCarbonFootprintTracking> {
    return this.prisma.carbonFootprintTracking.create(args);
  }
  async updateCarbonFootprintTracking(
    args: Prisma.CarbonFootprintTrackingUpdateArgs
  ): Promise<PrismaCarbonFootprintTracking> {
    return this.prisma.carbonFootprintTracking.update(args);
  }
  async deleteCarbonFootprintTracking(
    args: Prisma.CarbonFootprintTrackingDeleteArgs
  ): Promise<PrismaCarbonFootprintTracking> {
    return this.prisma.carbonFootprintTracking.delete(args);
  }
}
