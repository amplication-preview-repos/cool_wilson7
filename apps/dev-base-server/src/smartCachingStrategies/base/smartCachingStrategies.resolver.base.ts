/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SmartCachingStrategies } from "./SmartCachingStrategies";
import { SmartCachingStrategiesCountArgs } from "./SmartCachingStrategiesCountArgs";
import { SmartCachingStrategiesFindManyArgs } from "./SmartCachingStrategiesFindManyArgs";
import { SmartCachingStrategiesFindUniqueArgs } from "./SmartCachingStrategiesFindUniqueArgs";
import { DeleteSmartCachingStrategiesArgs } from "./DeleteSmartCachingStrategiesArgs";
import { SmartCachingStrategiesService } from "../smartCachingStrategies.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SmartCachingStrategies)
export class SmartCachingStrategiesResolverBase {
  constructor(
    protected readonly service: SmartCachingStrategiesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SmartCachingStrategies",
    action: "read",
    possession: "any",
  })
  async _smartCachingStrategiesItemsMeta(
    @graphql.Args() args: SmartCachingStrategiesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SmartCachingStrategies])
  @nestAccessControl.UseRoles({
    resource: "SmartCachingStrategies",
    action: "read",
    possession: "any",
  })
  async smartCachingStrategiesItems(
    @graphql.Args() args: SmartCachingStrategiesFindManyArgs
  ): Promise<SmartCachingStrategies[]> {
    return this.service.smartCachingStrategiesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SmartCachingStrategies, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SmartCachingStrategies",
    action: "read",
    possession: "own",
  })
  async smartCachingStrategies(
    @graphql.Args() args: SmartCachingStrategiesFindUniqueArgs
  ): Promise<SmartCachingStrategies | null> {
    const result = await this.service.smartCachingStrategies(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SmartCachingStrategies)
  @nestAccessControl.UseRoles({
    resource: "SmartCachingStrategies",
    action: "delete",
    possession: "any",
  })
  async deleteSmartCachingStrategies(
    @graphql.Args() args: DeleteSmartCachingStrategiesArgs
  ): Promise<SmartCachingStrategies | null> {
    try {
      return await this.service.deleteSmartCachingStrategies(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
