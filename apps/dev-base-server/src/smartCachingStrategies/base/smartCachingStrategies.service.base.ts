/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SmartCachingStrategies as PrismaSmartCachingStrategies,
} from "@prisma/client";

export class SmartCachingStrategiesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SmartCachingStrategiesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.smartCachingStrategies.count(args);
  }

  async smartCachingStrategiesItems(
    args: Prisma.SmartCachingStrategiesFindManyArgs
  ): Promise<PrismaSmartCachingStrategies[]> {
    return this.prisma.smartCachingStrategies.findMany(args);
  }
  async smartCachingStrategies(
    args: Prisma.SmartCachingStrategiesFindUniqueArgs
  ): Promise<PrismaSmartCachingStrategies | null> {
    return this.prisma.smartCachingStrategies.findUnique(args);
  }
  async createSmartCachingStrategies(
    args: Prisma.SmartCachingStrategiesCreateArgs
  ): Promise<PrismaSmartCachingStrategies> {
    return this.prisma.smartCachingStrategies.create(args);
  }
  async updateSmartCachingStrategies(
    args: Prisma.SmartCachingStrategiesUpdateArgs
  ): Promise<PrismaSmartCachingStrategies> {
    return this.prisma.smartCachingStrategies.update(args);
  }
  async deleteSmartCachingStrategies(
    args: Prisma.SmartCachingStrategiesDeleteArgs
  ): Promise<PrismaSmartCachingStrategies> {
    return this.prisma.smartCachingStrategies.delete(args);
  }
}
