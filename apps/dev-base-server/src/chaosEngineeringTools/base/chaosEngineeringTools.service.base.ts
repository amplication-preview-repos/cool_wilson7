/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ChaosEngineeringTools as PrismaChaosEngineeringTools,
} from "@prisma/client";

export class ChaosEngineeringToolsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChaosEngineeringToolsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chaosEngineeringTools.count(args);
  }

  async chaosEngineeringToolsItems(
    args: Prisma.ChaosEngineeringToolsFindManyArgs
  ): Promise<PrismaChaosEngineeringTools[]> {
    return this.prisma.chaosEngineeringTools.findMany(args);
  }
  async chaosEngineeringTools(
    args: Prisma.ChaosEngineeringToolsFindUniqueArgs
  ): Promise<PrismaChaosEngineeringTools | null> {
    return this.prisma.chaosEngineeringTools.findUnique(args);
  }
  async createChaosEngineeringTools(
    args: Prisma.ChaosEngineeringToolsCreateArgs
  ): Promise<PrismaChaosEngineeringTools> {
    return this.prisma.chaosEngineeringTools.create(args);
  }
  async updateChaosEngineeringTools(
    args: Prisma.ChaosEngineeringToolsUpdateArgs
  ): Promise<PrismaChaosEngineeringTools> {
    return this.prisma.chaosEngineeringTools.update(args);
  }
  async deleteChaosEngineeringTools(
    args: Prisma.ChaosEngineeringToolsDeleteArgs
  ): Promise<PrismaChaosEngineeringTools> {
    return this.prisma.chaosEngineeringTools.delete(args);
  }
}
