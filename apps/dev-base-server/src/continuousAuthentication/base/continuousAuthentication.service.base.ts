/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ContinuousAuthentication as PrismaContinuousAuthentication,
} from "@prisma/client";

export class ContinuousAuthenticationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContinuousAuthenticationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.continuousAuthentication.count(args);
  }

  async continuousAuthentications(
    args: Prisma.ContinuousAuthenticationFindManyArgs
  ): Promise<PrismaContinuousAuthentication[]> {
    return this.prisma.continuousAuthentication.findMany(args);
  }
  async continuousAuthentication(
    args: Prisma.ContinuousAuthenticationFindUniqueArgs
  ): Promise<PrismaContinuousAuthentication | null> {
    return this.prisma.continuousAuthentication.findUnique(args);
  }
  async createContinuousAuthentication(
    args: Prisma.ContinuousAuthenticationCreateArgs
  ): Promise<PrismaContinuousAuthentication> {
    return this.prisma.continuousAuthentication.create(args);
  }
  async updateContinuousAuthentication(
    args: Prisma.ContinuousAuthenticationUpdateArgs
  ): Promise<PrismaContinuousAuthentication> {
    return this.prisma.continuousAuthentication.update(args);
  }
  async deleteContinuousAuthentication(
    args: Prisma.ContinuousAuthenticationDeleteArgs
  ): Promise<PrismaContinuousAuthentication> {
    return this.prisma.continuousAuthentication.delete(args);
  }
}
