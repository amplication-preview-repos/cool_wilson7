/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ContinuousAuthenticationService } from "../continuousAuthentication.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ContinuousAuthenticationCreateInput } from "./ContinuousAuthenticationCreateInput";
import { ContinuousAuthentication } from "./ContinuousAuthentication";
import { ContinuousAuthenticationFindManyArgs } from "./ContinuousAuthenticationFindManyArgs";
import { ContinuousAuthenticationWhereUniqueInput } from "./ContinuousAuthenticationWhereUniqueInput";
import { ContinuousAuthenticationUpdateInput } from "./ContinuousAuthenticationUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ContinuousAuthenticationControllerBase {
  constructor(
    protected readonly service: ContinuousAuthenticationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContinuousAuthentication })
  @nestAccessControl.UseRoles({
    resource: "ContinuousAuthentication",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ContinuousAuthenticationCreateInput,
  })
  async createContinuousAuthentication(
    @common.Body() data: ContinuousAuthenticationCreateInput
  ): Promise<ContinuousAuthentication> {
    return await this.service.createContinuousAuthentication({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ContinuousAuthentication] })
  @ApiNestedQuery(ContinuousAuthenticationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ContinuousAuthentication",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async continuousAuthentications(
    @common.Req() request: Request
  ): Promise<ContinuousAuthentication[]> {
    const args = plainToClass(
      ContinuousAuthenticationFindManyArgs,
      request.query
    );
    return this.service.continuousAuthentications({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContinuousAuthentication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContinuousAuthentication",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async continuousAuthentication(
    @common.Param() params: ContinuousAuthenticationWhereUniqueInput
  ): Promise<ContinuousAuthentication | null> {
    const result = await this.service.continuousAuthentication({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContinuousAuthentication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContinuousAuthentication",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ContinuousAuthenticationUpdateInput,
  })
  async updateContinuousAuthentication(
    @common.Param() params: ContinuousAuthenticationWhereUniqueInput,
    @common.Body() data: ContinuousAuthenticationUpdateInput
  ): Promise<ContinuousAuthentication | null> {
    try {
      return await this.service.updateContinuousAuthentication({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContinuousAuthentication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContinuousAuthentication",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteContinuousAuthentication(
    @common.Param() params: ContinuousAuthenticationWhereUniqueInput
  ): Promise<ContinuousAuthentication | null> {
    try {
      return await this.service.deleteContinuousAuthentication({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
