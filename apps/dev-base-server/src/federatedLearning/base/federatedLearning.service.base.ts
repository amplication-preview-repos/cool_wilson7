/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FederatedLearning as PrismaFederatedLearning,
} from "@prisma/client";

export class FederatedLearningServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FederatedLearningCountArgs, "select">
  ): Promise<number> {
    return this.prisma.federatedLearning.count(args);
  }

  async federatedLearnings(
    args: Prisma.FederatedLearningFindManyArgs
  ): Promise<PrismaFederatedLearning[]> {
    return this.prisma.federatedLearning.findMany(args);
  }
  async federatedLearning(
    args: Prisma.FederatedLearningFindUniqueArgs
  ): Promise<PrismaFederatedLearning | null> {
    return this.prisma.federatedLearning.findUnique(args);
  }
  async createFederatedLearning(
    args: Prisma.FederatedLearningCreateArgs
  ): Promise<PrismaFederatedLearning> {
    return this.prisma.federatedLearning.create(args);
  }
  async updateFederatedLearning(
    args: Prisma.FederatedLearningUpdateArgs
  ): Promise<PrismaFederatedLearning> {
    return this.prisma.federatedLearning.update(args);
  }
  async deleteFederatedLearning(
    args: Prisma.FederatedLearningDeleteArgs
  ): Promise<PrismaFederatedLearning> {
    return this.prisma.federatedLearning.delete(args);
  }
}
