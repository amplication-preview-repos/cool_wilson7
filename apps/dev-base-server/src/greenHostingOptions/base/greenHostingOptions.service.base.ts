/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GreenHostingOptions as PrismaGreenHostingOptions,
} from "@prisma/client";

export class GreenHostingOptionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GreenHostingOptionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.greenHostingOptions.count(args);
  }

  async greenHostingOptionsItems(
    args: Prisma.GreenHostingOptionsFindManyArgs
  ): Promise<PrismaGreenHostingOptions[]> {
    return this.prisma.greenHostingOptions.findMany(args);
  }
  async greenHostingOptions(
    args: Prisma.GreenHostingOptionsFindUniqueArgs
  ): Promise<PrismaGreenHostingOptions | null> {
    return this.prisma.greenHostingOptions.findUnique(args);
  }
  async createGreenHostingOptions(
    args: Prisma.GreenHostingOptionsCreateArgs
  ): Promise<PrismaGreenHostingOptions> {
    return this.prisma.greenHostingOptions.create(args);
  }
  async updateGreenHostingOptions(
    args: Prisma.GreenHostingOptionsUpdateArgs
  ): Promise<PrismaGreenHostingOptions> {
    return this.prisma.greenHostingOptions.update(args);
  }
  async deleteGreenHostingOptions(
    args: Prisma.GreenHostingOptionsDeleteArgs
  ): Promise<PrismaGreenHostingOptions> {
    return this.prisma.greenHostingOptions.delete(args);
  }
}
