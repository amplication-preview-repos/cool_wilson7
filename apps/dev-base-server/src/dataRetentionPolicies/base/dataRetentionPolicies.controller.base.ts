/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DataRetentionPoliciesService } from "../dataRetentionPolicies.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DataRetentionPoliciesCreateInput } from "./DataRetentionPoliciesCreateInput";
import { DataRetentionPolicies } from "./DataRetentionPolicies";
import { DataRetentionPoliciesFindManyArgs } from "./DataRetentionPoliciesFindManyArgs";
import { DataRetentionPoliciesWhereUniqueInput } from "./DataRetentionPoliciesWhereUniqueInput";
import { DataRetentionPoliciesUpdateInput } from "./DataRetentionPoliciesUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DataRetentionPoliciesControllerBase {
  constructor(
    protected readonly service: DataRetentionPoliciesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataRetentionPolicies })
  @nestAccessControl.UseRoles({
    resource: "DataRetentionPolicies",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: DataRetentionPoliciesCreateInput,
  })
  async createDataRetentionPolicies(
    @common.Body() data: DataRetentionPoliciesCreateInput
  ): Promise<DataRetentionPolicies> {
    return await this.service.createDataRetentionPolicies({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DataRetentionPolicies] })
  @ApiNestedQuery(DataRetentionPoliciesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DataRetentionPolicies",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async dataRetentionPoliciesItems(
    @common.Req() request: Request
  ): Promise<DataRetentionPolicies[]> {
    const args = plainToClass(DataRetentionPoliciesFindManyArgs, request.query);
    return this.service.dataRetentionPoliciesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataRetentionPolicies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DataRetentionPolicies",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async dataRetentionPolicies(
    @common.Param() params: DataRetentionPoliciesWhereUniqueInput
  ): Promise<DataRetentionPolicies | null> {
    const result = await this.service.dataRetentionPolicies({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataRetentionPolicies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DataRetentionPolicies",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: DataRetentionPoliciesUpdateInput,
  })
  async updateDataRetentionPolicies(
    @common.Param() params: DataRetentionPoliciesWhereUniqueInput,
    @common.Body() data: DataRetentionPoliciesUpdateInput
  ): Promise<DataRetentionPolicies | null> {
    try {
      return await this.service.updateDataRetentionPolicies({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataRetentionPolicies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DataRetentionPolicies",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDataRetentionPolicies(
    @common.Param() params: DataRetentionPoliciesWhereUniqueInput
  ): Promise<DataRetentionPolicies | null> {
    try {
      return await this.service.deleteDataRetentionPolicies({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
