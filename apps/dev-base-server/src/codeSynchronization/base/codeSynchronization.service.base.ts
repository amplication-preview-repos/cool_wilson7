/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CodeSynchronization as PrismaCodeSynchronization,
} from "@prisma/client";

export class CodeSynchronizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CodeSynchronizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.codeSynchronization.count(args);
  }

  async codeSynchronizations(
    args: Prisma.CodeSynchronizationFindManyArgs
  ): Promise<PrismaCodeSynchronization[]> {
    return this.prisma.codeSynchronization.findMany(args);
  }
  async codeSynchronization(
    args: Prisma.CodeSynchronizationFindUniqueArgs
  ): Promise<PrismaCodeSynchronization | null> {
    return this.prisma.codeSynchronization.findUnique(args);
  }
  async createCodeSynchronization(
    args: Prisma.CodeSynchronizationCreateArgs
  ): Promise<PrismaCodeSynchronization> {
    return this.prisma.codeSynchronization.create(args);
  }
  async updateCodeSynchronization(
    args: Prisma.CodeSynchronizationUpdateArgs
  ): Promise<PrismaCodeSynchronization> {
    return this.prisma.codeSynchronization.update(args);
  }
  async deleteCodeSynchronization(
    args: Prisma.CodeSynchronizationDeleteArgs
  ): Promise<PrismaCodeSynchronization> {
    return this.prisma.codeSynchronization.delete(args);
  }
}
