/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CanaryDeployments } from "./CanaryDeployments";
import { CanaryDeploymentsCountArgs } from "./CanaryDeploymentsCountArgs";
import { CanaryDeploymentsFindManyArgs } from "./CanaryDeploymentsFindManyArgs";
import { CanaryDeploymentsFindUniqueArgs } from "./CanaryDeploymentsFindUniqueArgs";
import { DeleteCanaryDeploymentsArgs } from "./DeleteCanaryDeploymentsArgs";
import { CanaryDeploymentsService } from "../canaryDeployments.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CanaryDeployments)
export class CanaryDeploymentsResolverBase {
  constructor(
    protected readonly service: CanaryDeploymentsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CanaryDeployments",
    action: "read",
    possession: "any",
  })
  async _canaryDeploymentsItemsMeta(
    @graphql.Args() args: CanaryDeploymentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CanaryDeployments])
  @nestAccessControl.UseRoles({
    resource: "CanaryDeployments",
    action: "read",
    possession: "any",
  })
  async canaryDeploymentsItems(
    @graphql.Args() args: CanaryDeploymentsFindManyArgs
  ): Promise<CanaryDeployments[]> {
    return this.service.canaryDeploymentsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CanaryDeployments, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CanaryDeployments",
    action: "read",
    possession: "own",
  })
  async canaryDeployments(
    @graphql.Args() args: CanaryDeploymentsFindUniqueArgs
  ): Promise<CanaryDeployments | null> {
    const result = await this.service.canaryDeployments(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CanaryDeployments)
  @nestAccessControl.UseRoles({
    resource: "CanaryDeployments",
    action: "delete",
    possession: "any",
  })
  async deleteCanaryDeployments(
    @graphql.Args() args: DeleteCanaryDeploymentsArgs
  ): Promise<CanaryDeployments | null> {
    try {
      return await this.service.deleteCanaryDeployments(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
