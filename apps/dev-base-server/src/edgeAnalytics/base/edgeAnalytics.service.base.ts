/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EdgeAnalytics as PrismaEdgeAnalytics } from "@prisma/client";

export class EdgeAnalyticsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EdgeAnalyticsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.edgeAnalytics.count(args);
  }

  async edgeAnalyticsItems(
    args: Prisma.EdgeAnalyticsFindManyArgs
  ): Promise<PrismaEdgeAnalytics[]> {
    return this.prisma.edgeAnalytics.findMany(args);
  }
  async edgeAnalytics(
    args: Prisma.EdgeAnalyticsFindUniqueArgs
  ): Promise<PrismaEdgeAnalytics | null> {
    return this.prisma.edgeAnalytics.findUnique(args);
  }
  async createEdgeAnalytics(
    args: Prisma.EdgeAnalyticsCreateArgs
  ): Promise<PrismaEdgeAnalytics> {
    return this.prisma.edgeAnalytics.create(args);
  }
  async updateEdgeAnalytics(
    args: Prisma.EdgeAnalyticsUpdateArgs
  ): Promise<PrismaEdgeAnalytics> {
    return this.prisma.edgeAnalytics.update(args);
  }
  async deleteEdgeAnalytics(
    args: Prisma.EdgeAnalyticsDeleteArgs
  ): Promise<PrismaEdgeAnalytics> {
    return this.prisma.edgeAnalytics.delete(args);
  }
}
