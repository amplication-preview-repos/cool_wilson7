/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DataLakeIntegration } from "./DataLakeIntegration";
import { DataLakeIntegrationCountArgs } from "./DataLakeIntegrationCountArgs";
import { DataLakeIntegrationFindManyArgs } from "./DataLakeIntegrationFindManyArgs";
import { DataLakeIntegrationFindUniqueArgs } from "./DataLakeIntegrationFindUniqueArgs";
import { DeleteDataLakeIntegrationArgs } from "./DeleteDataLakeIntegrationArgs";
import { DataLakeIntegrationService } from "../dataLakeIntegration.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DataLakeIntegration)
export class DataLakeIntegrationResolverBase {
  constructor(
    protected readonly service: DataLakeIntegrationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DataLakeIntegration",
    action: "read",
    possession: "any",
  })
  async _dataLakeIntegrationsMeta(
    @graphql.Args() args: DataLakeIntegrationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DataLakeIntegration])
  @nestAccessControl.UseRoles({
    resource: "DataLakeIntegration",
    action: "read",
    possession: "any",
  })
  async dataLakeIntegrations(
    @graphql.Args() args: DataLakeIntegrationFindManyArgs
  ): Promise<DataLakeIntegration[]> {
    return this.service.dataLakeIntegrations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DataLakeIntegration, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DataLakeIntegration",
    action: "read",
    possession: "own",
  })
  async dataLakeIntegration(
    @graphql.Args() args: DataLakeIntegrationFindUniqueArgs
  ): Promise<DataLakeIntegration | null> {
    const result = await this.service.dataLakeIntegration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataLakeIntegration)
  @nestAccessControl.UseRoles({
    resource: "DataLakeIntegration",
    action: "delete",
    possession: "any",
  })
  async deleteDataLakeIntegration(
    @graphql.Args() args: DeleteDataLakeIntegrationArgs
  ): Promise<DataLakeIntegration | null> {
    try {
      return await this.service.deleteDataLakeIntegration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
