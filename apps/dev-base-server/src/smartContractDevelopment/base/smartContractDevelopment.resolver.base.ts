/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SmartContractDevelopment } from "./SmartContractDevelopment";
import { SmartContractDevelopmentCountArgs } from "./SmartContractDevelopmentCountArgs";
import { SmartContractDevelopmentFindManyArgs } from "./SmartContractDevelopmentFindManyArgs";
import { SmartContractDevelopmentFindUniqueArgs } from "./SmartContractDevelopmentFindUniqueArgs";
import { DeleteSmartContractDevelopmentArgs } from "./DeleteSmartContractDevelopmentArgs";
import { SmartContractDevelopmentService } from "../smartContractDevelopment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SmartContractDevelopment)
export class SmartContractDevelopmentResolverBase {
  constructor(
    protected readonly service: SmartContractDevelopmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SmartContractDevelopment",
    action: "read",
    possession: "any",
  })
  async _smartContractDevelopmentsMeta(
    @graphql.Args() args: SmartContractDevelopmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SmartContractDevelopment])
  @nestAccessControl.UseRoles({
    resource: "SmartContractDevelopment",
    action: "read",
    possession: "any",
  })
  async smartContractDevelopments(
    @graphql.Args() args: SmartContractDevelopmentFindManyArgs
  ): Promise<SmartContractDevelopment[]> {
    return this.service.smartContractDevelopments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SmartContractDevelopment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SmartContractDevelopment",
    action: "read",
    possession: "own",
  })
  async smartContractDevelopment(
    @graphql.Args() args: SmartContractDevelopmentFindUniqueArgs
  ): Promise<SmartContractDevelopment | null> {
    const result = await this.service.smartContractDevelopment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SmartContractDevelopment)
  @nestAccessControl.UseRoles({
    resource: "SmartContractDevelopment",
    action: "delete",
    possession: "any",
  })
  async deleteSmartContractDevelopment(
    @graphql.Args() args: DeleteSmartContractDevelopmentArgs
  ): Promise<SmartContractDevelopment | null> {
    try {
      return await this.service.deleteSmartContractDevelopment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
