/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GitOpsWorkflow as PrismaGitOpsWorkflow } from "@prisma/client";

export class GitOpsWorkflowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GitOpsWorkflowCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gitOpsWorkflow.count(args);
  }

  async gitOpsWorkflows(
    args: Prisma.GitOpsWorkflowFindManyArgs
  ): Promise<PrismaGitOpsWorkflow[]> {
    return this.prisma.gitOpsWorkflow.findMany(args);
  }
  async gitOpsWorkflow(
    args: Prisma.GitOpsWorkflowFindUniqueArgs
  ): Promise<PrismaGitOpsWorkflow | null> {
    return this.prisma.gitOpsWorkflow.findUnique(args);
  }
  async createGitOpsWorkflow(
    args: Prisma.GitOpsWorkflowCreateArgs
  ): Promise<PrismaGitOpsWorkflow> {
    return this.prisma.gitOpsWorkflow.create(args);
  }
  async updateGitOpsWorkflow(
    args: Prisma.GitOpsWorkflowUpdateArgs
  ): Promise<PrismaGitOpsWorkflow> {
    return this.prisma.gitOpsWorkflow.update(args);
  }
  async deleteGitOpsWorkflow(
    args: Prisma.GitOpsWorkflowDeleteArgs
  ): Promise<PrismaGitOpsWorkflow> {
    return this.prisma.gitOpsWorkflow.delete(args);
  }
}
