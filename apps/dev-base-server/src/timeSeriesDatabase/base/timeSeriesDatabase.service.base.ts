/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TimeSeriesDatabase as PrismaTimeSeriesDatabase,
} from "@prisma/client";

export class TimeSeriesDatabaseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TimeSeriesDatabaseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.timeSeriesDatabase.count(args);
  }

  async timeSeriesDatabases(
    args: Prisma.TimeSeriesDatabaseFindManyArgs
  ): Promise<PrismaTimeSeriesDatabase[]> {
    return this.prisma.timeSeriesDatabase.findMany(args);
  }
  async timeSeriesDatabase(
    args: Prisma.TimeSeriesDatabaseFindUniqueArgs
  ): Promise<PrismaTimeSeriesDatabase | null> {
    return this.prisma.timeSeriesDatabase.findUnique(args);
  }
  async createTimeSeriesDatabase(
    args: Prisma.TimeSeriesDatabaseCreateArgs
  ): Promise<PrismaTimeSeriesDatabase> {
    return this.prisma.timeSeriesDatabase.create(args);
  }
  async updateTimeSeriesDatabase(
    args: Prisma.TimeSeriesDatabaseUpdateArgs
  ): Promise<PrismaTimeSeriesDatabase> {
    return this.prisma.timeSeriesDatabase.update(args);
  }
  async deleteTimeSeriesDatabase(
    args: Prisma.TimeSeriesDatabaseDeleteArgs
  ): Promise<PrismaTimeSeriesDatabase> {
    return this.prisma.timeSeriesDatabase.delete(args);
  }
}
